// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	employee "employeedb/employee"

	mock "github.com/stretchr/testify/mock"
)

// EmployeeStoreInterface is an autogenerated mock type for the EmployeeStoreInterface type
type EmployeeStoreInterface struct {
	mock.Mock
}

// CreateEmployee provides a mock function with given fields: emp
func (_m *EmployeeStoreInterface) CreateEmployee(emp employee.Employee) error {
	ret := _m.Called(emp)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmployee")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(employee.Employee) error); ok {
		r0 = rf(emp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEmployee provides a mock function with given fields: id
func (_m *EmployeeStoreInterface) DeleteEmployee(id int) bool {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployee")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetEmployeeByID provides a mock function with given fields: id
func (_m *EmployeeStoreInterface) GetEmployeeByID(id int) (employee.Employee, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeeByID")
	}

	var r0 employee.Employee
	var r1 bool
	if rf, ok := ret.Get(0).(func(int) (employee.Employee, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) employee.Employee); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(employee.Employee)
	}

	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ListEmployees provides a mock function with given fields:
func (_m *EmployeeStoreInterface) ListEmployees() []employee.Employee {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListEmployees")
	}

	var r0 []employee.Employee
	if rf, ok := ret.Get(0).(func() []employee.Employee); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]employee.Employee)
		}
	}

	return r0
}

// UpdateEmployee provides a mock function with given fields: emp
func (_m *EmployeeStoreInterface) UpdateEmployee(emp employee.Employee) bool {
	ret := _m.Called(emp)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmployee")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(employee.Employee) bool); ok {
		r0 = rf(emp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewEmployeeStoreInterface creates a new instance of EmployeeStoreInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeStoreInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeStoreInterface {
	mock := &EmployeeStoreInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
